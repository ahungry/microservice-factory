;; microservice-factory - A project template generated by ahungry-fleece
;; Copyright (C) 2016 Your Name <microservice-factory@example.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;; microservice-factory.lib.stub.lisp

(in-package #:cl-user)

(defpackage mf.lib.parser
  (:use :cl
        :cl-ppcre
        :af.lib.io
        :af.lib.hashy)
  (:export
   :echo))

(in-package #:mf.lib.parser)

(defvar example-dir "~/src/lisp/microservice-factory/examples")
(defvar int-file (format nil "~a/integer/blueprint.yml" example-dir))
(defvar int-template (format nil "~a/integer/typescript/repository.ts" example-dir))

(defun to-bp (file)
  "Parse a file, and return the 'blueprint' hash."
  (af.lib.hashy:hash-from-yaml-file file))

(defvar blueprint (to-bp int-file))

(defstruct db name host port user pass)
(defstruct def name sql update-sql props)
(defstruct props name type)

(defmacro fmt (s &rest r) `(format nil ,(regex-replace-all "_" s "~a") ,@r))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun sym-to-ref (s) (fmt "#/~(_~)" (symbol-name s)))

  (defmacro with-bp-bindings (make blueprint  &rest props)
    `(,make ,@(loop for prop in props
                 collect prop
                 collect `(ref ,(sym-to-ref prop) ,blueprint)))))

(defun build-db (bp-db)
  (with-bp-bindings
      make-db bp-db
      :name :host :port :user :pass))

(defun parse-db (bp)
  (build-db (ref "#/db" bp)))

(defmethod build-props ((obj def))
  (mapcar
   (lambda (p)
     (with-bp-bindings make-props p :name :type))
   (def-props obj)))

(defun build-def (bp-def)
  "We expect a name, some sql (get) and some props."
  (let ((obj (with-bp-bindings
                 make-def bp-def
                 :name :sql :update-sql :props)))
    (setf (def-props obj) (build-props obj))
    obj))

(defun parse-defs (bp)
  (mapcar #'build-def (ref "#/defs" bp)))

(defmethod to-model-init-props ((p props))
  "Spit out the repo props."
  (format nil "      ~@(~a~)(o['~a']),~%"
          (props-type p)
          (props-name p)))

(defmethod to-model-props ((p props))
  "Spit out the repo props."
  (format nil "    public ~a: ~a = undefined,~%"
          (props-name p)
          (props-type p)))

(defmethod to-typescript ((obj def))
  "Convert an object definition into a useful typescript rendition."
  (let ((tpl (file-get-contents int-template)))
    (setf tpl (regex-replace-all "Stub" tpl (def-name obj)))
    (setf tpl (regex-replace-all "__SQL__" tpl (def-sql obj)))
    (setf tpl (regex-replace-all "__UPDATE-SQL__" tpl (def-update-sql obj)))
    (setf tpl (regex-replace-all
               ".*//propsFromSql" tpl
               (mapcar #'to-model-init-props (def-props obj))))
    (setf tpl (regex-replace-all ".*//props" tpl (mapcar #'to-model-props (def-props obj))))
    tpl))

(defmethod to-typescript-with-db ((obj def) (db-obj db))
  (let ((tpl (to-typescript obj)))
    (setf tpl (regex-replace-all "__NAME__" tpl (db-name db-obj)))
    (setf tpl (regex-replace-all "__HOST__" tpl (db-host db-obj)))
    (setf tpl (regex-replace-all "__PORT__" tpl (stringify (db-port db-obj))))
    (setf tpl (regex-replace-all "__USER__" tpl (db-user db-obj)))
    (setf tpl (regex-replace-all "__PASS__" tpl (db-pass db-obj)))
    tpl))

(defun test-to-file ()
  (let* ((bp (to-bp int-file))
         (db (parse-db bp))
         (defs (parse-defs bp)))
    (file-put-contents
     "/tmp/Person.ts"
     (to-typescript-with-db (car defs) db)
     :overwrite t)))

(defun echo (input)
  input)

;;; "microservice-factory.lib.stub" goes here. Hacks and glory await!
